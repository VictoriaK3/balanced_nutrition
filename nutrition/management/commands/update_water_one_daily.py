from django.core.management.base import BaseCommand
from django.utils import timezone
from nutrition.models import DailyDeficit, UserProfile
from nutrition.utils import calculate_daily_water, get_temperature

class Command(BaseCommand):
    help = "–ü—Ä–æ–≤–µ—Ä—è–≤–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ç–∞ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞ –¥–Ω–µ–≤–Ω–∏—è –≤–æ–¥–µ–Ω –ø—Ä–∏–µ–º, –∞–∫–æ —Å–µ –µ –ø—Ä–æ–º–µ–Ω–∏–ª."

    def handle(self, *args, **kwargs):
        today = timezone.localdate()

        for profile in UserProfile.objects.all():
            city = profile.city
            if not city:
                print(f"[‚ùå] –ü—Ä–æ–ø—É—Å–Ω–∞—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª {profile.user.username} ‚Äì –Ω—è–º–∞ –≤—ä–≤–µ–¥–µ–Ω –≥—Ä–∞–¥.")
                continue

            temp = get_temperature(city)
            if temp is None:
                print(f"[‚ö†Ô∏è] –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ {city}")
                continue

            new_water = calculate_daily_water(
                weight=profile.weight,
                age=profile.age,
                activity_level=profile.activity_level,
                city=city
            )

            deficit, created = DailyDeficit.objects.get_or_create(
                user=profile.user,
                date=today,
                defaults={"daily_water_goal": new_water, "city": city}
            )

            if created:
                print(f"[‚úÖ] –°—ä–∑–¥–∞–¥–µ–Ω –≤–æ–¥–µ–Ω –∑–∞–ø–∏—Å –∑–∞ {profile.user.username} ‚Äì {new_water} –ª")
            elif round(deficit.daily_water_goal, 2) != round(new_water, 2):
                old = deficit.daily_water_goal
                deficit.daily_water_goal = new_water
                deficit.city = city
                deficit.save()
                print(f"[üíß] –û–±–Ω–æ–≤–µ–Ω –≤–æ–¥–µ–Ω –ø—Ä–∏–µ–º –∑–∞ {profile.user.username}: {old} ‚ûî {new_water} –ª")
            else:
                print(f"[‚úî] –ù—è–º–∞ –ø—Ä–æ–º—è–Ω–∞ –∑–∞ {profile.user.username} ‚Äì –æ—Å—Ç–∞–≤–∞ {new_water} –ª")
